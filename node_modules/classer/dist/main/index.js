'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _winston = require('winston');

var _winston2 = _interopRequireDefault(_winston);

var _cliColor = require('cli-color');

var _cliColor2 = _interopRequireDefault(_cliColor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//

//
var T_START = Date.now();

//
var H_LEVEL_COLORS = {
	fail: _cliColor2.default.xterm(196),
	error: _cliColor2.default.red,
	good: _cliColor2.default.green,
	warn: _cliColor2.default.xterm(208),
	info: _cliColor2.default.blue,
	out: function out(s) {
		return s;
	}
};

//
var map_index = function map_index(h_input) {
	var i_index = 0;
	var h_output = {};
	for (var s_key in h_input) {
		h_output[s_key] = i_index++;
	}
	return h_output;
};

//
var logger = new _winston2.default.Logger({

	//
	levels: map_index(H_LEVEL_COLORS),

	//
	transports: [new _winston2.default.transports.Console({

		// all levels
		level: 'out',

		// timestamp format
		timestamp: function timestamp() {
			return ((Date.now() - T_START) / 1000).toFixed(2);
		},

		// message formatting
		formatter: function formatter(h_opt) {
			var f_colorizer = H_LEVEL_COLORS[h_opt.level];
			return '[' + f_colorizer(h_opt.meta.class_name) + ']+' + h_opt.timestamp() + 's/ ' + (undefined !== h_opt.message ? f_colorizer(h_opt.message) : '') + '';
		}
	})]
});

//
var local = function local(s_class_name, f_constructor) {
	var h_static = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	var h_logger_config = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];


	// when called (with or without new keyword), invoke constructor
	var f_local = function f_local() {
		return f_constructor.apply(this, arguments);
	};

	// default members
	Object.defineProperties(f_local, {

		// override toString
		toString: {
			value: function value() {
				return s_class_name + '()';
			}
		}
	});

	// define static members
	for (var s_key in h_static) {
		Object.defineProperty(f_local, s_key, {
			enumerable: true,
			value: h_static[s_key]
		});
	}

	// set logger actions

	var _loop = function _loop(s_level) {
		var f_log = function f_log(s_msg) {
			logger.log(s_level, s_msg, { class_name: s_class_name });
		};

		if ('fail' === s_level) {
			f_log = function f_log(s_msg) {
				logger.log(s_level, s_msg, { class_name: s_class_name });
				logger.log(s_level, new Error().stack.split(/\n/g).slice(3).join('\n'), { class_name: s_class_name });
				throw 'Exitting on fatal error';
			};
		}

		Object.defineProperty(f_local, s_level, {
			value: f_log
		});
	};

	for (var s_level in H_LEVEL_COLORS) {
		_loop(s_level);
	}

	// return actual class
	return f_local;
};

// define properties/methods on public operator
local.operator = function (f_operator, h_properties) {
	// simple copy-ref
	for (var s_property in h_properties) {
		f_operator[s_property] = h_properties[s_property];
	}

	// return mutated operator
	return f_operator;
};

// export module
exports.default = local;